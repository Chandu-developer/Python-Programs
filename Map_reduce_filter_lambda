"""
Filter:- first of all, requires the function to return boolean values (true or false)
and then passes each element in the iterable through the function, "filtering" away those 
that are false

->formula :- filter(func,iter)
This function is used to check whether the element in the iterable is true or false
If true return that element
else remove
"""
"""
Lambda expression:- lambda expressions (or lambda forms) are utilized to construct 
anonymous functions. 
keyword Lambda
e.g..,list(lambda func,iter)
a lambda is written in a single line of code and can also be invoked immediately.



"""
"""scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]
score = list(map(filter(lambda x: x>75,scores)))
score.sort()
print(score)"""

"""scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]
for i in range(len(scores)):
    if scores[i]>75:
        print(scores[i],end =' ')
        
#Palindrome detector normal way
dromes = ("demigod", "rewire", "madam", "freer", "anutforajaroftuna", "kiosk")
b = []
for i in dromes:
    if i==i[::-1]:
        b.append(i)
print(b)

#now by using filter and lambda func
dromes = ("demigod", "rewire", "madam", "freer", "anutforajaroftuna", "kiosk")
drome = list(filter(lambda x:x==x[::-1],dromes))
print(drome)

#normal way of finding vowels in a list
a = ['a','b','c','d','e']
letters = ['a', 'e', 'i', 'o', 'u']
for i in a:
    if i in letters:
        print(i,end =' ')
print()

#by using filter
a = ['a','b','c','d','e']
b = list(filter(lambda x:x in ('aeiou'),a))
print(b)

my_list = [12, 65, 54, 39, 102, 339, 221, 50, 70, ] 
b = list(filter(lambda x:x%2==0,my_list))
print(b)

#anagrams
#Counter class will form a dict where chars is taken as keys and values are freq of those chars
from collections import Counter
a='abcd'
b='dabc'
if Counter(a)==Counter(b):
    print('Anagram')
else:
    print('not an Anagram')"""
    
#Programs using Lambda function
    
#simple program addition
add = lambda x,y:x+y
print(add(2,4))


a=[2,3,6,4,5,9]
even = list(filter(lambda x:x%2==0,a))
print(even)  

string='some kind of a useless lambda'
print((lambda string : print(string))(string)) 


#Lambda

#cube
"""g=lambda x:x*x*x
print(g(3))"""

"""a=[1,3,2,4,6,5,8,7,9,55,27]
b=list(filter(lambda x:(x%2!=0),a))
print(b)"""

"""#a=["ravi","chandu","surya"]
l=list(map(str.upper,['b','a','g']))
print(l)"""

"""a=lambda x,y:x+y #here x,y are arguments and x+y is the expression
print(a(10,20))"""

"""def func(a):
    return lambda x:a*x
b=func(10)
print(b(10))"""

"""l1=[1,2,3]
l2=[1,2,3]
x=map(lambda z,y:z+y,l1,l2)
print(x)"""

#The re.match function returns a match object on success, None on failure.
#We usegroup(num) or groups() function of match object to get matched expression.
"""import re
a="Cats are smarter than Dogs"
m=re.match(r"(.*) are (.*) Dogs",a)
if m:
    print(m.group())
    print(m.group(0))
    print(m.group(1))
    print(m.group(2))
else:
    print("-1")"""
    
#match func
"""import re
s="Cats are smarter than Dogs"
m=re.match(r"(.*) are (.*)",s)
if m:
    print(m.group(0))
    print(m.group(2))
else:
    print(-1)"""

#difference between match and search
#match checks for the match only at the begining of the search while searches for the match anywhere in the string.
#search
"""import re
s="Cats are smarter than Dogs"
m=re.search(r'are',s)
if m:
    print(m.group(0))
else:
    print("not found")
    
#match
import re
s="Cats are smarter than Dogs"
m=re.search(r'are',s)
if m:
    print(m.group(0))
else:
    print("not found")"""


#To check the substring in a string
"""a="chahahnduhah"
b="hah"
c=0
for i in range(len(a)-len(b)+1):
    if a[i:i+len(b)]==b:
        c+=1
print(c)"""
    
s="cahndu ravi"
c=s.split(" ")
for i in c:
    b=i.capitalize()
    print(b)
    

#Map
"""
Map function : map(func, *iterables)
In python 3 map object returns a generator obj so if u want to convert it into list
then list(map(func,*iterables))
"""



#convert all to upper case
my_pets = ['alfred', 'tabitha', 'william', 'arla']
for i in my_pets:
    print(i.upper())

#another way is take some empty list and append
my_pets = ['alfred', 'tabitha', 'william', 'arla']
pets = []
for i in my_pets:
    upper_=i.upper()
    pets.append(upper_)
print(pets)

#but now conveting using map function
my_pets = ['alfred', 'tabitha', 'william', 'arla','william']
maping = set(map(str.upper,my_pets))
print(maping)

#In the above code str.upper is the func and my_pets is the iterable

#another program mult by 2 to each any every elem in a list
a = [3,2,1,5,8,9]
maping = list(map(lambda n:n*n,a))
print(maping)

#In this prog it will be like round(range(1,n))
circle_areas = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.00013]
n = len(circle_areas)
circle = list(map(round,circle_areas,range(1,n)))
print(circle)

a=[1,2,3,4,5]
b = [2,3,4,6]
d=list(zip(a,b))
print(d)


#Reduce

"""
The reduce function, like map(), is used to apply an operation to every element in a sequence.
Step 1) Perform t he defined operation on the first 2 elements of the sequence.

Step 2) Save this result

Step 3) Perform the operation with the saved result and the next element in the sequence.

Step 4) Repeat until no more elements are left.
"""

"""from functools import reduce
sequences = [1,2,3,4,5]
res = reduce(lambda x,y: x+y,sequences)
print("The sum of all the elem in the list is ",res)
res1 = reduce(lambda x,y:x*y,sequences)
print('The multiplier of all the elems in the list is ',res1)

res2 = reduce(lambda x,y:x*y,sequences)
print(res2)


def say_hi():
    return 'hello there'

decorate = uppercase_decorator(say_hi)
print(decorate())"""


a=10
print(a)
print(id(a))
